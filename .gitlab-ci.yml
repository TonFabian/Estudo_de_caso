image: python:3.9-slim-buster

stages:
  - build
  - test
  - lint
  - security
  - dast
  - monitor

before_script:
  - pip3 install -r requirements.txt

build:
  stage: build
  script:
    - echo "Build stage  Executando processos de build..."

test:
  stage: test
  script:
    - pytest todo/tests

lint:
  stage: lint
  image: python:3.9-slim-buster  # Use uma imagem Docker com Python
  script: 
     - pip3 install -r requirements.txt
  allow_failure: true  # Opcional: Permite que o job falhe sem interromper o pipeline


security:
  stage: security
  script:
    - pip3 install bandit  # Instalar Bandit
    - bandit -r . -f json -o bandit_report.json || true  # Executar Bandit e ignorar falhas
  artifacts:
    paths:
      - bandit_report.json  # Salvar o relatório como artefato


dast:
  stage: dast
  script:
    - docker run -d --name my-app -p 5000:5000 python:3.9-slim-buster  # Iniciar aplicação Flask
    - docker run -d --name zap -p 8083:8080 zaproxy/zap-stable:2.15.0 zap.sh -daemon -host 0.0.0.0 -port 8080
    - echo "Aguardando o ZAP inicializar..."
    - sleep 60  # Aguardar a inicialização completa do ZAP
    - docker exec zap zap-cli quick-scan -t http://localhost:5000 -r zap_report.html || true  # Executar o scan de segurança
  artifacts:
    paths:
      - zap_report.html  # Salvar o relatório como artefato
    expire_in: 1 week

monitor:
  stage: monitor
  script:
    - |
      curl -X POST -H "Content-Type: application/json" -d '{
        "name": "Loki",
        "type": "loki",
        "url": "'"$LOKI_URL"'",
        "access": "proxy"
      }' "http://$GRAFANA_USER:$GRAFANA_PASSWORD@$GRAFANA_URL/api/datasources" || echo "Falha ao configurar Loki no Grafana"


