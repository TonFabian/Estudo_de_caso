image: docker:latest

stages:
  - build
  - test
  - lint
  - security
  - dast
  - deploy
  - monitor

variables:
  DOCKER_REGISTRY: registry.gitlab.com/<seu_namespace>
  IMAGE_NAME: my-app
  GRAFANA_URL: http://localhost:3100
  GRAFANA_USER: admin
  GRAFANA_PASSWORD: admin
  LOKI_URL: http://localhost:3100

build:
  stage: build
  script:
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_ID .

test:
  stage: test
  script:
    - pytest

lint:
  stage: lint
  script:
    - flake8  # Exemplo de ferramenta de lint para Python
    - isort  # Para organizar as importações

security:
  stage: security
  script:
    - bandit -r . -f json -o bandit_report.json
    - dependency-check.sh --project "my-project" --scan . --format ALL
    # Adicione aqui outros testes de segurança, como SAST

dast:
  stage: dast
  image: zaproxy/zap-stable:2.15.0
  services:
    - docker:dind
  script:
    - docker run -d --name my-app -p 5000:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_ID # Inicia sua aplicação
    - docker run -d --name zap -p 8080:8080 zaproxy/zap-stable:2.15.0 zap.sh -daemon -host 0.0.0.0 -port 8080
    - sleep 30 # Aguarda a aplicação e o ZAP estarem prontos
    - docker exec zap zap-cli quick-scan -t http://localhost:5000 -r zap_report.html || true  # Ignora erros e continua a pipeline
  artifacts:
    paths:
      - zap_report.html
    expire_in: 1 week

deploy:
  stage: deploy
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_ID
    # Adicione aqui scripts para deploy em diferentes ambientes (ex: staging, produção)

monitor:
  stage: monitor
  script:
    # Configuração do Grafana para se conectar ao Loki
    - |
      curl -X POST -H "Content-Type: application/json" -d '{
        "name": "Loki",
        "type": "loki",
        "url": "'"$LOKI_URL"'",
        "access": "proxy"
      }' http://"$GRAFANA_USER":"$GRAFANA_PASSWORD"@"$GRAFANA_URL"/api/datasources

