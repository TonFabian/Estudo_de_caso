image: python:3.9-slim-buster  # Imagem base minimalista

stages:
  - build
  - test
  - lint
  - security
  - dast
  - monitor

variables:
  # Credenciais devem ser armazenadas em um gerenciador de segredos

before_script:
  - pip install --cache-dir /tmp/pip_cache -r requirements.txt  # Instalação única de dependências

build:
  stage: build
  script:
    # Comandos de build específicos para seu projeto Python (se necessário)
    - echo "Build stage: Executando processos de build..."

test:
  stage: test
  script:
    - pytest  # Executar testes

lint:
  stage: lint
  script:
    - pip install flake8 isort  # Instalar ferramentas de lint
    - flake8 .  # Executar flake8
    - isort . --check-only  # Verificar importações

security:
  stage: security
  script:
    - pip install bandit  # Instalar Bandit
    - bandit -r . -f json -o bandit_report.json  # Executar Bandit

dast:
  stage: dast
  script:
    - docker run -d --name my-app -p 5000:5000 python:3.9-slim-buster  # Iniciar aplicação Flask
    - docker run -d --name zap -p 8080:8080 owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8080
    - echo "Aguardando o ZAP inicializar..."
    - sleep 60  # Aguardar a inicialização completa do ZAP
    - docker exec zap zap-cli quick-scan -t http://localhost:5000 -r zap_report.html || true  # Executar o scan de segurança
  artifacts:
    paths:
      - zap_report.html  # Salvar o relatório como artefato
    expire_in: 1 week

monitor:
  stage: monitor
  script:
    - |
      curl -X POST -H "Content-Type: application/json" -d '{
        "name": "Loki",
        "type": "loki",
        "url": "'"$LOKI_URL"'",
        "access": "proxy"
      }' http://"$GRAFANA_USER":"$GRAFANA_PASSWORD"@"$GRAFANA_URL"/api/datasources || echo "Falha ao configurar Loki no Grafana"
