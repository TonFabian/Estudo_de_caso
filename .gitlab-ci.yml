image: docker:latest

stages:
  - build
  - test
  - lint
  - security
  - dast
  - deploy
  - monitor

variables:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: my-app
  GRAFANA_URL: http://localhost:3100
  GRAFANA_USER: admin
  GRAFANA_PASSWORD: admin
  LOKI_URL: http://localhost:3100
  DOCKER_DRIVER: overlay2

before_script:
  - docker info

build:
  stage: build
  script:
    - docker build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_ID .

test:
  stage: test
  script:
    - pytest

lint:
  stage: lint
  script:
    - flake8  # Exemplo de ferramenta de lint para Python
    - isort  # Para organizar as importações

security:
  stage: security
  script:
    - bandit -r . -f json -o bandit_report.json
    - dependency-check.sh --project "my-project" --scan . --format ALL

dast:
  stage: dast
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_TLS_CERTDIR: ""
  script:
    - docker run -d --name my-app -p 5000:5000 $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_ID
    - docker run -d --name zap -p 8080:8080 owasp/zap2docker-stable zap.sh -daemon -host 0.0.0.0 -port 8080
    - echo "Aguardando o ZAP inicializar..."
    - sleep 60  # Aumentar o tempo de espera para garantir que o ZAP esteja pronto
    - docker exec zap zap-cli quick-scan -t http://localhost:5000 -r zap_report.html || true
  artifacts:
    paths:
      - zap_report.html
    expire_in: 1 week

deploy:
  stage: deploy
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $DOCKER_REGISTRY
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_PIPELINE_ID

monitor:
  stage: monitor
  script:
    - |
      curl -X POST -H "Content-Type: application/json" -d '{
        "name": "Loki",
        "type": "loki",
        "url": "'"$LOKI_URL"'",
        "access": "proxy"
      }' http://"$GRAFANA_USER":"$GRAFANA_PASSWORD"@"$GRAFANA_URL"/api/datasources || echo "Falha ao configurar Loki no Grafana"
